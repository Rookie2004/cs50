0.  Its a word with more than 45 characters. It wont accept words with more than 45 letters.
1.  Returns resource usage, like memory consumption and CPU time
2.  There are two structs inside the struct with some variables that you cannot see in this 'man' and this struct further consists of 14 variables.
3.  You dont have to copy the value then which saves time. 
4.  Returns the character currently pointed by the internal file position indicator of the specified stream. if the character is in the alphabet or its an ' and has an index value higher than 0, the place the character in the char word[index] then increment index ++. if it is a character but it is too long it will give a new word. If a number is found it will ignore and give a new word. Else if a new word has been found and \0 is added to the end of the word.Updat counter words by 1. Check the spelling with functions still to write. If the word is misspelled print the misspelled word and update misspelled.
5.  Its possible by reading characters one by one to exclude the ' from being on the first place for example. You can give different instructions to different places of character.
6.  Since those parameters never have to be adjusted it will probably save time while checking for these parameters.
7.  I've just a trie, since i thought it would maybe take more time to load the dictionary, but it would find the key faster since it just had to follow a certiain path. In each of my nodes there are the different letters of the alphabet. root has 27 children. And those children have children also untill all the words are loaded into the dictionary. I still think this is the best way to implement a library and search the key.
8.  0.17 being the fastest and 0.21 the slowest using austinpowers.txt and large standard dictionary.
9.  I havent really changed anything in my code. I think its very fast! at least almost as fast as your code. I see that load could be faster when compared to your code allthough that could also be because you implemented a hash table.
10. No, im actually really satisfied with the end result.
